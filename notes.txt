Node is a way of running javascript code on the server as opposed to being forced to run it on the client

Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine
Uses an event-driven, non-blocking I/O model

V8 is written in C++

job of javascript engine is to take in js code and complie it down to machine code that machine can actually execute

Asynchronous Node.js
Call Stack -> NodeAPIs
                |
                V
Event Loop
        Callback Queue


Creating a server offers users a different way to interact with your applications
instead of needing to run commands from the terminal to interact with your app

We can serve a website or we could serve up an http json based api
You can serve a static website or create a complex Http json based api to serve as the backend for something like a mobile or web application


A callback is a function we provide to another function as an argument with the intention of having it called later on
forEach and filter use callback pattern but are not asynchronous

Handlebars -> allows for rendering dynamic content -> we're able to set up templates which are similar to html documents but we can inject specific values inside

-------------------
Methods are defined directly on an object



Data validation -> allow only ages greater than 18
Data sanitization -> Alter data before saving it -> Remove empty spaces around user's name

REST API
Representational State Transfer - Application Programming Interface

API -> Set of tools that allow to build software applications (very broad term)
Node provides us with APIs such as fs
NPM modules like express provide us with APIs

REST -> Predefined operations that will allow a client to go through the process of creating a frontend or a task manager
Representational -> Representations of our data
State -> Stateless -> Each request from the client contains all info needed for the server to process the request -> operation we're trying to perform, all data the operation actually needs in order to work, also includes authentication
Works via http requests
Predefined Operations -> CRUD
Expose Necessary set of predefined operations
Create Read Update Delete

Every REST operatsion is defined by two pieces of data
All requests include the HTTP method and the path
HTTP methods -> 
        Create ->       POST /tasks
        Read ->         GET /tasks
        Read ->         GET /tasks/:id
        Update ->       PATCH /tasks/:id
        Delete ->       DELETE /tasks/:id

Request - Response

POSTMAN allows us to test an api without having to build a client